public $baseUrl = 'https://www.memtime.com/';
public $loginUrl = '';
public $invoicePageUrl = 'https://portal.memtime.com/portal/invoices';

public $username_selector = 'input[name="username"]';
public $password_selector = 'input[name="password"]';
public $remember_me_selector = '';
public $submit_login_selector = 'button.submit';

public $check_login_failed_selector = 'p[class="errors show"]';
public $check_login_success_selector = 'header a[href="/logout"]';

public $isNoInvoice = true;

/**
    * Entry Method thats called for a portal
    * @param Integer $count Number of times portal is retried.
    */
private function initPortal($count)
{
    $this->exts->log('Begin initPortal ' . $count);
    $this->exts->openUrl($this->baseUrl);
    sleep(6);
    $this->exts->loadCookiesFromFile();

    if ($this->exts->exists('button#CybotCookiebotDialogBodyLevelButtonLevelOptinAllowAll')) {
        $this->exts->moveToElementAndClick('button#CybotCookiebotDialogBodyLevelButtonLevelOptinAllowAll');
        sleep(2);
    }

    if (!$this->checkLogin()) {
        $this->exts->log('NOT logged via cookie');

        $this->exts->clearCookies();

        if ($this->exts->exists('a[id="login"]')) {
            $this->exts->moveToElementAndClick('a[id="login"]');
            sleep(5);
        }

        $this->fillForm(0);
    }
    if ($this->checkLogin()) {
        $this->exts->log(">>>>>>>>>>>>>>>Login successful!!!!");
        $this->exts->capture("LoginSuccess");

        if ($this->exts->exists('button#CybotCookiebotDialogBodyLevelButtonLevelOptinAllowAll')) {
            $this->exts->moveToElementAndClick('button#CybotCookiebotDialogBodyLevelButtonLevelOptinAllowAll');
            sleep(2);
        }

        $this->exts->openUrl($this->invoicePageUrl);
        $this->downloadInvoices();
        // Final, check no invoice
        if ($this->isNoInvoice) {
            $this->exts->no_invoice();
        }

        $this->exts->success();
    } else {
        $this->exts->log(__FUNCTION__ . '::Use login failed');
        $this->exts->log(__FUNCTION__ . '::Last URL: ' . $this->exts->getUrl());

        $error_text = strtolower($this->exts->extract($this->check_login_failed_selector));

        $this->exts->log(__FUNCTION__ . '::Error text: ' . $error_text);
        if (
            stripos($error_text, strtolower('No account found for email address')) !== false ||
            stripos($error_text, strtolower('Password wrong')) !== false
        ) {
            $this->exts->loginFailure(1);
        } else {
            $this->exts->loginFailure();
        }
    }
}

public function fillForm($count)
{
    $this->exts->log("Begin fillForm " . $count);

    $this->exts->waitTillPresent($this->username_selector);
    if ($this->exts->querySelector($this->username_selector) != null) {
        $this->exts->capture("1-pre-login");
        $this->exts->log("Enter Username");
        $this->exts->moveToElementAndType($this->username_selector, $this->username);
        sleep(2);

        if ($this->exts->exists($this->submit_login_selector)) {
            $this->exts->moveToElementAndClick($this->submit_login_selector);
            sleep(2);
        }
    }

    if ($this->exts->querySelector($this->password_selector) != null) {
        $this->exts->log("Enter Password");
        $this->exts->moveToElementAndType($this->password_selector, $this->password);
        sleep(2);

        if ($this->exts->exists($this->remember_me_selector)) {
            $this->exts->click_by_xdotool($this->remember_me_selector);
            sleep(2);
        }
    }

    $this->exts->capture("1-login-page-filled");
    if ($this->exts->exists($this->submit_login_selector)) {
        $this->exts->moveToElementAndClick($this->submit_login_selector);
        sleep(2);
    }
}
/**
    * Method to Check where user is logged in or not
    * return boolean true/false
    */
public  function checkLogin()
{
    $this->exts->log("Begin checkLogin ");
    $isLoggedIn = false;
    try {
        for ($wait = 0; $wait < 2 && $this->exts->executeSafeScript("return !!document.querySelector('" . $this->check_login_success_selector . "');") != 1; $wait++) {
            $this->exts->log('Waiting for login.....');
            sleep(10);
        }
        if ($this->exts->exists($this->check_login_success_selector)) {
            $this->exts->log(">>>>>>>>>>>>>>>Login successful!!!!");
            $isLoggedIn = true;
        }
    } catch (Exception $exception) {
        $this->exts->log("Exception checking loggedin " . $exception);
    }
    return $isLoggedIn;
}

private function downloadInvoices($count = 1)
{
    $this->exts->log(__FUNCTION__);

    $this->exts->waitTillPresent('table tbody tr');
    $this->exts->capture("4-invoices-classic");

    $invoices = [];
    $rows = $this->exts->getElements('table tbody tr');
    foreach ($rows as $key => $row) {
        $invoiceBtn = $this->exts->getElement('a', $row);
        if ($invoiceBtn != null) {
            $invoiceUrl = '';
            $invoiceName = $invoiceBtn->getAttribute("id");
            $invoiceDate = $this->exts->extract('td:nth-child(1)', $row);
            $invoiceAmount = $this->exts->extract('td:nth-child(4)', $row);

            $this->isNoInvoice = false;
            $this->exts->log('--------------------------');
            $this->exts->log('invoiceName: ' . $invoiceName);
            $this->exts->log('invoiceDate: ' . $invoiceDate);
            $this->exts->log('invoiceAmount: ' .  $invoiceAmount);
            $this->exts->log('invoiceUrl: ' . $invoiceUrl);

            $this->isNoInvoice = false;

            $invoiceFileName = !empty($invoiceName) ? $invoiceName . '.pdf' : '';
            $invoiceDate = $this->exts->parse_date($invoiceDate, 'd.m.Y', 'Y-m-d');
            $this->exts->log('Date parsed: ' .  $invoiceDate);


            if ($this->exts->document_exists($invoiceFileName)) {
                continue;
            }
            $this->exts->no_margin_pdf = 1;
            try{
                $invoiceBtn->click();
            }catch(\Exception  $e){
                $this->exts->execute_javascript("arguments[0].click()", [$invoiceBtn]);
            }
            sleep(4);
            $downloaded_file = $this->exts->find_saved_file('pdf', $invoiceFileName);
            sleep(2);
            if (trim($downloaded_file) != '' && file_exists($downloaded_file)) {
                $this->exts->new_invoice($invoiceUrl,  $invoiceDate, $invoiceAmount, $downloaded_file);
                sleep(1);
            } else {
                $this->exts->log(__FUNCTION__ . '::No download ' . $invoiceFileName);
            }
        }
    }
}