public $baseUrl = "https://sellercentral.amazon.com/home";
public $username_selector = 'form[name="signIn"] input[name="email"]:not([type="hidden"])';
public $password_selector = 'form[name="signIn"] input[name="password"]';
public $submit_login_selector = 'form[name="signIn"] input#signInSubmit';
public $remember_me = 'form[name="signIn"] input[name="rememberMe"]:not(:checked)';
public $restrictPages = 3;

public $isNoInvoice = true;
public $payment_settlements = 0;
public $transaction_invoices = 0;
public $seller_fees = 0;
public $no_advertising_bills = 0;
public $currentSelectedMarketPlace = "";
public $no_marketplace = 1;
/**
    * Entry Method thats called for a portal
    * @param Integer $count Number of times portal is retried.
    */
private function initPortal($count)
{
    $this->exts->log('Begin initPortal ' . $count);

    $this->restrictPages = isset($this->exts->config_array["restrictPages"]) ? (int)@$this->exts->config_array["restrictPages"] : 3;
    $this->payment_settlements = isset($this->exts->config_array["payment_settlements"]) ? (int)@$this->exts->config_array["payment_settlements"] : $this->payment_settlements;
    $this->transaction_invoices = isset($this->exts->config_array["transaction_invoices"]) ? (int)@$this->exts->config_array["transaction_invoices"] : $this->transaction_invoices;
    $this->seller_fees = isset($this->exts->config_array["seller_fees"]) ? (int)@$this->exts->config_array["seller_fees"] : $this->seller_fees;
    $this->no_advertising_bills = isset($this->exts->config_array["advertising_bills"]) ? (int)@$this->exts->config_array["advertising_bills"] : $this->no_advertising_bills;
    $this->exts->log('CONFIG payment_settlements: ' . $this->payment_settlements);
    $this->exts->log('CONFIG transaction view: ' . $this->transaction_invoices);
    $this->exts->log('CONFIG seller fees: ' . $this->seller_fees);

    $this->exts->loadCookiesFromFile(true);

    $this->exts->openUrl($this->baseUrl);
    sleep(5);
    $this->exts->capture('1-init-page-1');

    if ($this->exts->profile_loaded() && !$this->isLoginSuccess() && !$this->exts->exists('.picker-app .picker-view-column button.picker-button')) {
        $this->exts->log("Clearing browser history, cookie, cache");
        $this->exts->clearCookies();
        $this->exts->execute_javascript('
        localStorage.clear();
        sessionStorage.clear();
    ');
        sleep(3);
        //Load cookie forcefully this will load freash cookie even if profile is loaded.
        $this->exts->loadCookiesFromFile(true);
        $this->exts->openUrl($this->baseUrl);
        sleep(5);
        $this->exts->capture('1-init-page-2');
        $this->checkSolveCaptcha();
    }

    $this->check_and_pick_market(); // Huy 2022-10: MUST check market picker here, for some case, picker showed but no US market, then the domain is not .com, then website may require login
    // If user hase not logged in from cookie
    if (!$this->isLoginSuccess()) {
        $this->exts->log('NOT logged via cookie');
        $this->checkSolveCaptcha();
        // $this->exts->openUrl($this->baseUrl);
        $this->exts->moveToElementAndClick('kat-button#sign-in-button > button, a[href*="amazon.com/signin"]');
        sleep(5);
        if (!$this->exts->exists($this->password_selector)) {
            $this->exts->capture("2-login-exception");
            $this->exts->clearCookies();
            $this->exts->openUrl($this->baseUrl);
            sleep(5);
            $this->exts->moveToElementAndClick('kat-button#sign-in-button > button, a[href*="amazon.com/signin"]');
            sleep(7);
        }
        // Login, retry few time since it show captcha
        $this->checkFillLogin();
        sleep(5);
        // retry if captcha showed
        if ($this->exts->allExists([$this->password_selector, 'input#auth-captcha-guess']) && !$this->isIncorrectCredential()) {
            $this->checkFillLogin();
            sleep(5);
        }
        if ($this->exts->allExists([$this->password_selector, 'input#auth-captcha-guess']) && !$this->isIncorrectCredential()) {
            $this->checkFillLogin();
            sleep(5);
        }
        if ($this->exts->allExists([$this->password_selector, 'input#auth-captcha-guess']) && !$this->isIncorrectCredential()) {
            $this->checkFillLogin();
            sleep(5);
            if ($this->exts->allExists([$this->password_selector, 'input#auth-captcha-guess']) && $this->captcha_required() && !$this->isIncorrectCredential()) {
                $this->checkFillLogin();
                sleep(5);
            }
            if ($this->exts->allExists([$this->password_selector, 'input#auth-captcha-guess']) && $this->captcha_required() && !$this->isIncorrectCredential()) {
                $this->checkFillLogin();
                sleep(5);
            }
            if ($this->exts->allExists([$this->password_selector, 'input#auth-captcha-guess']) && $this->captcha_required() && !$this->isIncorrectCredential()) {
                $this->checkFillLogin();
                sleep(5);
            }
        }
        // End handling login form

        $this->checkFillTwoFactor();
        sleep(5);

        $isOtpExpired =  $this->exts->extract('div.a-alert-content');
        $this->exts->log('::Otp Expired Message:: ' . $isOtpExpired);
        sleep(5);
        $this->exts->capture('otp-page-1');

        if (stripos($isOtpExpired, strtolower("The One Time Password (OTP) you entered is not valid. Please try again.")) !== false) {

            $this->exts->moveToElementAndClick('a[id="auth-get-new-otp-link"]');
            sleep(4);
            $this->exts->waitTillPresent('input[id="auth-send-code"]');
            $this->exts->moveToElementAndClick('input[id="auth-send-code"]');
            sleep(10);

            $this->checkFillTwoFactor();
        }

        if (stripos($isOtpExpired, strtolower("seconds before requesting another code.")) !== false) {
            sleep(20);
            $this->exts->moveToElementAndClick('a[id="auth-get-new-otp-link"]');
            sleep(4);
            $this->exts->waitTillPresent('input[id="auth-send-code"]');
            $this->exts->moveToElementAndClick('input[id="auth-send-code"]');
            sleep(10);

            $this->checkFillTwoFactor();
        }

        if ($this->exts->urlContains('forgotpassword/reverification')) {
            $this->exts->account_not_ready();
        }

        if ($this->exts->exists('form#auth-account-fixup-phone-form a#ap-account-fixup-phone-skip-link')) {
            $this->exts->moveToElementAndClick('form#auth-account-fixup-phone-form a#ap-account-fixup-phone-skip-link');
            sleep(2);
        }
    }

    sleep(5);
    // $this->exts->waitTillPresent('div[class="full-page-account-switcher-account"]:nth-child(3) button', 15);
    // if ($this->exts->exists('div[class="full-page-account-switcher-account"]:nth-child(3) button')) {
    //     $this->exts->click_element('div[class="full-page-account-switcher-account"]:nth-child(3) button');
    //     sleep(1);
    //     if ($this->exts->exists('#sc-content-container .full-page-account-switcher-accounts-wrapper div:nth-child(3) div:nth-child(3)')) {
    //         $this->exts->click_element('#sc-content-container .full-page-account-switcher-accounts-wrapper div:nth-child(3) div:nth-child(3)');
    //         sleep(2);
    //         if ($this->exts->exists('div[class*="switcher-footer"] button')) {
    //             $this->exts->click_element('div[class*="switcher-footer"] button');
    //             sleep(10);
    //         } else {
    //             $this->exts->log("Not Found Select account button selector");
    //         }
    //     } else {
    //         $this->exts->log("Not Found Germany button selector");
    //     }
    // } else {
    //     $this->exts->log("Not Found Factor Glue button selector");
    // }

    $this->exts->waitTillPresent('button.full-page-account-switcher-account-details');
    if ($this->exts->exists('button.full-page-account-switcher-account-details')) {
        // This portal is for Germany so select UK first, else select default
        $target_selection = $this->exts->getElementByText('button.full-page-account-switcher-account-details', ['United Kingdom', 'United States'], null, true);
        if ($target_selection == null) {
            
            $target_selection = $this->exts->getElementByText('button.full-page-account-switcher-account-details', ['United Kingdom', 'United States',], null, true);
        }

        if ($target_selection == null && count($this->exts->getElements('button.full-page-account-switcher-account-details')) > 1) { // If do not found, get default picker
            $target_selection = $this->exts->getElements('button.full-page-account-switcher-account-details')[1];
        }
        if ($target_selection != null) {
            $this->exts->click_element($target_selection);
        }
        sleep(1);

        $this->exts->capture('selected-region');
        
        if ($this->exts->exists('button.kat-button--primary:not([disabled])')) {
            $this->exts->moveToElementAndClick('button.kat-button--primary:not([disabled])');
            sleep(10);
        } else {
            $this->exts->account_not_ready();
        }
    }

    $this->exts->capture('account-selected');
    // Fill again if login form open
    $this->checkFillLogin();
    sleep(5);
    $this->checkFillTwoFactor();
    sleep(5);
    




    $this->check_and_pick_market();
    // then check user logged in or not
    if ($this->isLoginSuccess()) {
        sleep(3);
        $this->exts->log(__FUNCTION__ . '::User logged in');
        $this->exts->capture("3-login-success");

        $this->invoicePage();
    } else {
        $this->exts->log(__FUNCTION__ . '::Use login failed ' . $this->exts->getUrl());


        $error_text = strtolower($this->exts->extract('div#auth-email-invalid-claim-alert div.a-alert-content'));
        $OtpPageError =  $this->exts->extract('div.a-alert-content');

        $this->exts->log('::Error text ' . $error_text);
        $this->exts->log('::Error text Otp Page ' . $OtpPageError);


        if ($this->isIncorrectCredential()) {
            $this->exts->loginFailure(1);
        } else if ($this->exts->exists('form[name="forgotPassword"]')) {
            $this->exts->account_not_ready();
        } else if ($this->exts->exists('[data-metric-name="sc:auth-failed:no-account:start-registration-button"]')) {
            $this->exts->account_not_ready();
        } else if (
            stripos($OtpPageError, strtolower('Die von dir angegebenen Anmeldeinformationen waren inkorrekt. Überprüfe sie und versuche es erneut.')) !== false ||
            stripos($OtpPageError, strtolower('The credentials you provided were incorrect. Check them and try again.')) !== false ||
            stripos($OtpPageError, strtolower("The One Time Password (OTP) you entered is not valid. Please try again.")) !== false
        ) {
            $this->exts->loginFailure(1);
        } else if (
            stripos($error_text, strtolower('Wrong or Invalid email address or mobile phone number. Please correct and try again.')) !== false ||
            stripos($error_text, strtolower('wrong or invalid e-mail address or mobile phone number. please correct and try again.')) !== false
        ) {
            $this->exts->loginFailure(1);
        } elseif (
            strpos($this->exts->extract('div[id="auth-error-message-box"] div[class="a-alert-content"]'), 'you entered is not valid') !== false ||
            strpos($this->exts->extract('div[id="auth-error-message-box"] div[class="a-alert-content"]'), 'Your password is incorrect') !== false
        ) {
            $this->exts->loginFailure(1);
        } else {
            $this->exts->loginFailure();
        }
    }
}
private function check_and_pick_market()
{
    if ($this->exts->exists('.picker-app .picker-view-column button.picker-button')) {
        // There will be 3 columns, the first column is sub-accounts.
        // If just one column, then we must select sub-account first
        $count_column = count($this->exts->querySelectorAll('.picker-app .picker-view-column'));
        if ($count_column < 2) {
            $this->exts->capture('1-sub-account-picker');
            $this->exts->moveToElementAndClick('.picker-app .picker-view-column button.picker-button');
            sleep(5);
        }
        $this->exts->capture('1-market-picker');
        // This portal is for amazon.com so select US first, else select default
        $us_market_option = $this->exts->getElement('//button[contains(@class, "picker-button")]//*[text()="United States"]', null, 'xpath');
        if ($us_market_option != null) {
            $this->exts->click_element($us_market_option);
        } else {
            $this->exts->click_element('.picker-view-column:last-child .picker-button');
        }
        sleep(2);
        if ($this->exts->exists('.picker-app button.picker-switch-accounts-button:not([disabled])')) {
            $this->exts->moveToElementAndClick('.picker-app button.picker-switch-accounts-button:not([disabled])');
            sleep(10);
        }
    }
}
private function checkFillLogin()
{
    if ($this->exts->exists($this->password_selector)) {
        sleep(3);
        $this->exts->capture("2-login-page");

        $this->exts->log("Enter Username");
        $this->exts->moveToElementAndType($this->username_selector, $this->username);
        sleep(1);

        if ($this->exts->exists('input[id="continue"]')) {
            $this->exts->moveToElementAndClick('input[id="continue"]');
            sleep(5);
        }

        $this->exts->log("Enter Password");
        $this->exts->moveToElementAndType($this->password_selector, '');
        $this->exts->moveToElementAndClick($this->password_selector);
        $this->exts->moveToElementAndType($this->password_selector, $this->password);
        sleep(1);
        $this->exts->moveToElementAndClick('form[name="signIn"] input[name="rememberMe"]:not(:checked)');

        if ($this->exts->exists('input#auth-captcha-guess')) {
            $this->processCaptcha('img#auth-captcha-image', 'input#auth-captcha-guess');
        }
        $this->exts->capture("2-login-page-filled");
        $this->exts->moveToElementAndClick($this->submit_login_selector);
    } else {
        $this->exts->log(__FUNCTION__ . '::Login page not found');
        $this->exts->capture("2-login-page-not-found");
    }
}
private function checkFillTwoFactor()
{
    $this->exts->capture("2.0-two-factor-checking");
    if ($this->exts->exists('div.auth-SMS input[type="radio"]')) {
        $this->exts->moveToElementAndClick('div.auth-SMS input[type="radio"]:not(:checked)');
        sleep(2);
        $this->exts->moveToElementAndClick('input#auth-send-code');
        sleep(5);
    } else if ($this->exts->exists('div.auth-TOTP input[type="radio"]')) {
        $this->exts->moveToElementAndClick('div.auth-TOTP input[type="radio"]:not(:checked)');
        sleep(2);
        $this->exts->moveToElementAndClick('input#auth-send-code');
        sleep(5);
    } else if ($this->exts->allExists(['input[type="radio"]', 'input#auth-send-code'])) {
        $this->exts->moveToElementAndClick('input[type="radio"]:not(:checked)');
        sleep(2);
        $this->exts->moveToElementAndClick('input#auth-send-code');
        sleep(5);
    }

    if ($this->exts->exists('input[name="otpCode"]')) {
        $two_factor_selector = 'input[name="otpCode"]';
        $two_factor_message_selector = '#auth-mfa-form h1 + p';
        $two_factor_submit_selector = '#auth-signin-button';
        $this->exts->log("Two factor page found.");
        $this->exts->capture("2.1-two-factor");

        if ($this->exts->querySelector($two_factor_message_selector) != null) {
            $this->exts->two_factor_notif_msg_en = "";
            for ($i = 0; $i < count($this->exts->querySelectorAll($two_factor_message_selector)); $i++) {
                $this->exts->two_factor_notif_msg_en = $this->exts->two_factor_notif_msg_en . $this->exts->querySelectorAll($two_factor_message_selector)[$i]->getText() . "\n";
            }
            $this->exts->two_factor_notif_msg_en = trim($this->exts->two_factor_notif_msg_en);
            $this->exts->two_factor_notif_msg_de = $this->exts->two_factor_notif_msg_en;
            $this->exts->log("Message:\n" . $this->exts->two_factor_notif_msg_en);
        }
        if ($this->exts->two_factor_attempts == 2) {
            $this->exts->two_factor_notif_msg_en = $this->exts->two_factor_notif_msg_en . ' ' . $this->exts->two_factor_notif_msg_retry_en;
            $this->exts->two_factor_notif_msg_de = $this->exts->two_factor_notif_msg_de . ' ' . $this->exts->two_factor_notif_msg_retry_de;
        }
        $this->exts->notification_uid = "";
        $this->exts->two_factor_attempts++;
        $two_factor_code = trim($this->exts->fetchTwoFactorCode());
        if (!empty($two_factor_code) && trim($two_factor_code) != '') {
            $this->exts->log("checkFillTwoFactor: Entering two_factor_code." . $two_factor_code);

            if ($this->exts->exists('input[name="otpCode"]')) {
                $this->exts->moveToElementAndType('input[name="otpCode"]', $two_factor_code);
            } else if ($this->exts->exists('input[name="otc-1"]')) {
                $this->exts->moveToElementAndClick('input[name="otc-1"]');
                $this->exts->moveToElementAndType($two_factor_selector, $two_factor_code);
            }

            if ($this->exts->exists('label[for="auth-mfa-remember-device"] input[name="rememberDevice"]:not(:checked)')) {
                $this->exts->moveToElementAndClick('label[for="auth-mfa-remember-device"]');
            }
            $this->exts->capture("2.2-two-factor-filled-" . $this->exts->two_factor_attempts);

            $this->exts->log("checkFillTwoFactor: Clicking submit button.");
            sleep(1);
            $this->exts->moveToElementAndClick($two_factor_submit_selector);
            sleep(10);
        } else {
            $this->exts->log("Not received two factor code");
        }
    } else if ($this->exts->exists('[name="transactionApprovalStatus"], form[action*="/approval/poll"], #resend-approval-form')) {
        $this->exts->log("Two factor page found.");
        $this->exts->capture("2.1-two-factor");
        $message_selector = '.transaction-approval-word-break, #channelDetails, #channelDetailsWithImprovedLayout, .transaction-approval-word-break, #channelDetailsWithImprovedLayout';
        $this->exts->two_factor_notif_msg_en = join(' ', $this->exts->getElementsAttribute($message_selector, 'innerText'));
        $this->exts->two_factor_notif_msg_de = $this->exts->two_factor_notif_msg_en . "\n>>>Geben Sie danach hier unten \"OK\" ein.";
        $this->exts->two_factor_notif_msg_en = $this->exts->two_factor_notif_msg_en . "\n>>>Enter \"OK\" after confirmation";
        $this->exts->log($this->exts->two_factor_notif_msg_en);

        $this->exts->notification_uid = "";
        $this->exts->two_factor_attempts++;
        $two_factor_code = trim($this->exts->fetchTwoFactorCode());
        if (!empty($two_factor_code) && trim($two_factor_code) != '') {
            $this->exts->moveToElementAndClick('#resend_notification_expander a[data-action="a-expander-toggle"]');
            sleep(1);
            // Click refresh page if user confirmed
            $this->exts->moveToElementAndClick('a.a-link-normal[href*="/ap/cvf/approval"], a#resend-approval-link');
        }
    }
}
private function isIncorrectCredential()
{
    $incorrect_credential_keys = [
        'Es konnte kein Konto mit dieser',
        'dass die eingegebene Nummer korrekt ist oder melde dich',
        't find an account with that',
        'Falsches Passwort',
        'password is incorrect',
        'password was incorrect',
        'Passwort war nicht korrekt',
        'Impossible de trouver un compte correspondant',
        'Votre mot de passe est incorrect',
        'Je wachtwoord is onjuist',
        'La tua password non',
        'a no es correcta'
    ];
    $error_message = $this->exts->extract('#auth-error-message-box');
    foreach ($incorrect_credential_keys as $incorrect_credential_key) {
        if (strpos(strtolower($error_message), strtolower($incorrect_credential_key)) !== false) {
            return true;
        }
    }
    return false;
}
private function processCaptcha($captcha_image_selector, $captcha_input_selector)
{
    $this->exts->log("--IMAGE CAPTCHA--");
    if ($this->exts->exists($captcha_image_selector)) {
        $image_path = $this->exts->captureElement($this->exts->process_uid, $captcha_image_selector);
        $source_image = imagecreatefrompng($image_path);
        imagejpeg($source_image, $this->exts->screen_capture_location . $this->exts->process_uid . '.jpg', 90);

        if (!empty($this->exts->config_array['captcha_shell_script'])) {
            $cmd = $this->exts->config_array['captcha_shell_script'] . " --PROCESS_UID::" . $this->exts->process_uid;
            $this->exts->log('Executing command : ' . $cmd);
            exec($cmd, $output, $return_var);
            $this->exts->log('Command Result : ' . print_r($output, true));

            if (!empty($output)) {
                $output = $output[0];
                if (stripos($output, 'OK|') !== false) {
                    $captcha_code = trim(end(explode("OK|", $output)));
                } else {
                    $this->exts->log('1:processCaptcha::ERROR when get response:' . $output);
                }
            }
            if ($captcha_code == '') {
                $this->exts->log("Can not get result from API");
            } else {
                $this->exts->moveToElementAndType($captcha_input_selector, $captcha_code);
                return true;
            }
        }
    } else {
        $this->exts->log("Image does not found!");
    }

    return false;
}
private function captcha_required()
{
    // Supporting de, fr, en, es, it, nl language
    $captcha_required_keys = [
        'wie sie auf dem Bild erscheinen',
        'die in der Abbildung unten gezeigt werden',
        'Geben Sie die Zeichen so ein, wie sie auf dem Bild erscheinen',
        'the characters as they are shown in the image',
        'Enter the characters as they are given',
        'luego introduzca los caracteres que aparecen en la imagen',
        'Introduce los caracteres tal y como aparecen en la imagen',
        "dans l'image ci-dessous",
        "apparaissent sur l'image",
        'quindi digita i caratteri cos',
        'Inserire i caratteri cos',
        'en voer de tekens in zoals deze worden weergegeven in de afbeelding hieronder om je account',
        'Voer de tekens in die je uit veiligheidsoverwegingen moet'
    ];
    $error_message = $this->exts->extract('#auth-error-message-box, #auth-warning-message-box');
    foreach ($captcha_required_keys as $captcha_required_key) {
        if (strpos(strtolower($error_message), strtolower($captcha_required_key)) !== false) {
            return true;
        }
    }
    return false;
}
private function isLoginSuccess()
{

    $loginSuccessSelector = 'a[href="/sign-out"] , li.sc-logout-quicklink, a[href*="sign-in/logout"], .nav-right-section [data-test-tag="nav-settings-button"]';
    for ($wait = 0; $wait < 2 && $this->exts->executeSafeScript("return !!document.querySelector('" . $loginSuccessSelector . "');") != 1; $wait++) {
        $this->exts->log('Waiting for login.....');
        sleep(8);
    }
    return $this->exts->exists($loginSuccessSelector);
}

function invoicePage()
{
    $this->exts->log("Invoice page");

    $this->exts->moveToElementAndClick('#sc-navtab-reports');
    sleep(5);
    $paths = explode('/', $this->exts->getUrl());
    $currentDomainUrl = $paths[0] . '//' . $paths[2];
    $this->exts->log($currentDomainUrl);
    $this->exts->openUrl($currentDomainUrl . '/gp/payments-account/past-settlements.html');
    sleep(20);
    $marketplaces = $this->exts->getElementsAttribute('select#sc-mkt-picker-switcher-select option.sc-mkt-picker-switcher-select-option', 'value');
    $this->exts->log('NUMBER OF marketplaces: ' . count($marketplaces));
    if (count($marketplaces) > 0) {
        $this->no_marketplace = 1;
        foreach ($marketplaces as $key => $marketplace_option) {
            $this->exts->log('SWITCHING TO market place with path: ' . $marketplace_option);
            $this->currentSelectedMarketPlace = $marketplace_option;
            $this->exts->openUrl('https://sellercentral.amazon.com/gp/payments-account/past-settlements.html');
            sleep(15);
            $this->exts->execute_javascript('let selectBox = document.querySelector("select#sc-mkt-picker-switcher-select");
            selectBox.value = ' . $marketplace_option . ';
            selectBox.dispatchEvent(new Event("change"));');
            sleep(15);

            if ($this->exts->querySelector($this->password_selector) == null) {
                if ($this->exts->querySelector('a[href*="/gp/payments-account/settlement-summary.html/ref=xx_payments_tnav_xx"]')) {
                    $this->exts->moveToElementAndClick('a[href*="/gp/payments-account/settlement-summary.html/ref=xx_payments_tnav_xx"]');
                    sleep(15);
                }

                $Urldomain = "sellercentral.amazon.com";
                $currentUrl = $this->exts->getUrl();
                $tempArr = parse_url($currentUrl);
                $Urldomain = $tempArr["host"];

                if ((int)@$this->transaction_invoices == 1) {
                    // Download from transaction page
                    if ($this->restrictPages == 0) {
                        $startDate = date('d.m.y', strtotime('-1 years'));
                    } else {
                        $startDate = date('d.m.y', strtotime('-2 months'));
                    }
                    $endDate = date('d.m.y');
                    $transaction_url = 'https://' . $Urldomain . '/gp/payments-account/view-transactions.html?searchLanguage=en_US&view=filter&eventType=&subview=dateRange&startDate=' . $startDate . '&endDate=' . $endDate . '&Update=&pageSize=Ten&mostRecentLast=0';
                    $this->exts->log('TRANSACTION URL: ' . $transaction_url);
                    $this->exts->openUrl($transaction_url);
                    sleep(10);

                    if (count($this->exts->querySelectorAll('#content-top button[type="button"]')) > 1) {
                        $this->downloadTransaction();

                        //Click on other button "Standard or Invoice orders"
                        $this->exts->openUrl($transaction_url);
                        sleep(10);
                        $this->exts->moveToElementAndClick('#content-top button.marketplace[type="button"]');
                        sleep(10);
                        $this->downloadTransaction();
                    } else {
                        $this->downloadTransaction();
                    }
                }

                // Download from advertiser invoices
                if ((int)@$this->no_advertising_bills != 1) {
                    $this->exts->openUrl('https://' . $Urldomain . '/gp/advertiser/transactions/transactions.html');
                    $this->downloadAdvertiserInvoices();
                }

                // Download from statement page
                if ((int)@$this->payment_settlements == 1) {
                    $this->exts->openUrl('https://' . $Urldomain . '/gp/payments-account/past-settlements.html');
                    sleep(10);
                    if (count($this->exts->querySelectorAll('#content-top button[type="button"]')) > 1) {
                        $this->downloadStatements();

                        //Click on other button "Standard or Invoice orders"
                        $this->exts->openUrl('https://' . $Urldomain . '/gp/payments-account/past-settlements.html');
                        sleep(10);
                        $this->exts->moveToElementAndClick('#content-top button.marketplace[type="button"]');
                        sleep(10);
                        $this->downloadStatements();
                    } else {
                        $this->downloadStatements();
                    }
                }

                // Download from seller-fee-invoices
                if ((int)@$this->seller_fees == 1) {
                    $this->exts->openUrl('https://' . $Urldomain . '/tax/seller-fee-invoices');
                    $this->downloadSellerFeeInvoice();
                }
            } else {
                $this->exts->log("Need username password both. ");
                $this->exts->capture("login-page-after-marketplace-change-" . $marketplace_option);
            }
        }
        $this->exts->openUrl($currentDomainUrl . '/gp/payments-account/past-settlements.html');
        sleep(15);
    } else if ($this->exts->exists('#partner-switcher button.dropdown-button, button.partner-dropdown-button')) {
        $merchant_links = array();
        $this->exts->moveToElementAndClick('#partner-switcher button.dropdown-button, button.partner-dropdown-button');
        sleep(1);
        $partner_levels = $this->exts->getElements('#partner-switcher .partner-level');
        // It can be multil parter level, expand all then get all merchant IDs
        foreach ($partner_levels as $partner_index => $partner_level) {
            $dropdown_arrow = $this->exts->getElement('.dropdown-arrow', $partner_level);
            $child_merchants = count($this->exts->getElements('ul.merchant-level li a[id]', $partner_level));
            if ($dropdown_arrow != null && $child_merchants == 0) { // If no child merchant loaded, click to expand this partner level
                try {
                    $this->exts->log('Expand partner level');
                    $dropdown_arrow->click();
                } catch (\Exception $exception) {
                    $this->exts->execute_javascript("arguments[0].click()", [$dropdown_arrow]);
                }
            }
            sleep(2);
            $partner_id = $this->exts->extract('label.partner-label', $partner_level, 'for');
            $merchants = $this->exts->getElements('ul.merchant-level li a', $partner_level);
            foreach ($merchants as $merchant) {
                $merchant_id = $merchant->getAttribute('id');
                $merchant_text = $merchant->getAttribute('innerText');
                if (stripos($merchant_text, 'United States') !== false) { // push US merchant to first
                    array_unshift($merchant_links, array(
                        'partner_id' => $partner_id,
                        'merchant_id' => $merchant_id
                    ));
                } else {
                    array_push($merchant_links, array(
                        'partner_id' => $partner_id,
                        'merchant_id' => $merchant_id
                    ));
                }
            }
        }
        $this->exts->capture('partner-and-merchant-checking');
        $this->exts->log('Total merchants - ' . count($merchant_links));

        foreach ($merchant_links as $merchant) {
            $this->exts->update_process_lock();
            $partner_arrow_selector = '#partner-switcher .partner-level label.dropdown-arrow[for="' . $merchant['partner_id'] . '"]';
            $merchant_selector = '#partner-switcher .partner-level label.partner-label[for="' . $merchant['partner_id'] . '"] + ul li a#' . $merchant['merchant_id'];
            if (!$this->exts->exists('#partner-switcher button.dropdown-button, button.partner-dropdown-button')) {
                $this->exts->openUrl('https://sellercentral.amazon.com/home');
                sleep(10);
            }
            $this->exts->log('SWITCH to Merchant Selector - ' . $merchant_selector);
            $this->exts->moveToElementAndClick('#partner-switcher button.dropdown-button, button.partner-dropdown-button');
            sleep(1);
            if (!$this->exts->exists($merchant_selector)) {
                // If expanding needed, click partner to expand all sub-merchants
                $this->exts->moveToElementAndClick($partner_arrow_selector);
                sleep(3);
            }
            $this->exts->moveToElementAndClick($merchant_selector);
            sleep(10);


            $this->exts->capture("partner-switch-" . $merchant['partner_id'] . $merchant['merchant_id']);
            // Mukesh Kumar Singh
            // do download if domain is not getting changed. so if domain is getting changed for any marketplace we will stop there and check other marketplace
            // Because this happens from long time for some users it change and for some it is not
            if (!$this->isLoginSuccess()) {
                continue;
            }

            if ($this->exts->querySelector('a[href*="/gp/payments-account/settlement-summary.html/ref=xx_payments_tnav_xx"]')) {
                $this->exts->moveToElementAndClick('a[href*="/gp/payments-account/settlement-summary.html/ref=xx_payments_tnav_xx"]');
                sleep(15);
            } else {
                if ($this->exts->querySelector('a[href*="/gp/payments-account/settlement-summary.html/ref=xx_payments_"]')) {
                    $this->exts->moveToElementAndClick('a[href*="/gp/payments-account/settlement-summary.html/ref=xx_payments_"]');
                    sleep(15);
                }
            }

            $market_place_homepage = $this->exts->getUrl();
            $this->exts->log('MarketPlace Home Page - ' . $market_place_homepage);

            $currentDomainUrl = "https://sellercentral.amazon.com";
            $tempArr = parse_url($market_place_homepage);
            $currentDomainUrl = "https://" . $tempArr["host"];

            if ((int)@$this->transaction_invoices == 1) {
                // Download from transaction page
                if ($this->restrictPages == 0) {
                    $startDate = strtotime('-1 years') . '000';
                } else {
                    $startDate = strtotime('-2 months') . '000';
                }
                $endDate = strtotime('now') . '000';
                $transaction_url = $currentDomainUrl . '/payments/event/view?accountType=PAYABLE&startDate=' . $startDate . '&endDate=' . $endDate . '&resultsPerPage=50&pageNumber=1';
                $this->exts->log('TRANSACTION URL (Standard Orders): ' . $transaction_url);
                $this->exts->openUrl($transaction_url);
                $this->downloadTransaction();
                $transaction_url = $currentDomainUrl . '/payments/event/view?accountType=INVOICING&startDate=' . $startDate . '&endDate=' . $endDate . '&resultsPerPage=50&pageNumber=1';
                $this->exts->log('TRANSACTION URL (Invoiced Orders): ' . $transaction_url);
                $this->exts->openUrl($transaction_url);
                $this->downloadTransaction();
            }

            // Download from statement page
            if ((int)@$this->payment_settlements == 1) {
                $this->exts->openUrl($currentDomainUrl . '/gp/payments-account/past-settlements.html');
                $this->downloadStatements();
            }

            // Download from seller-fee-invoices
            if ((int)@$this->seller_fees == 1) {
                $this->exts->openUrl($currentDomainUrl . '/tax/seller-fee-invoices');
                $this->downloadSellerFeeInvoice();
            }
            // Download from advertiser invoices
            if ((int)@$this->no_advertising_bills != 1) {
                $this->exts->openUrl($currentDomainUrl . '/gp/advertiser/transactions/transactions.html');
                $this->downloadAdvertiserInvoices();
            }

            sleep(5);
            if (!$this->exts->exists('#partner-switcher button.dropdown-button, button.partner-dropdown-button')) {
                $this->exts->openUrl($market_place_homepage);
                sleep(10);
            }

            $this->exts->update_process_lock();
        }
    } else {
        $this->no_marketplace = 0;
        $this->exts->openUrl($currentDomainUrl . '/gp/payments-account/past-settlements.html');
        sleep(15);

        if ($this->exts->querySelector('a[href*="/gp/payments-account/settlement-summary.html/ref=xx_payments_tnav_xx"]')) {
            $this->exts->moveToElementAndClick('a[href*="/gp/payments-account/settlement-summary.html/ref=xx_payments_tnav_xx"]');
            sleep(15);
        }

        $Urldomain = "sellercentral.amazon.com";

        if ((int)@$this->transaction_invoices == 1) {
            // Download from transaction page
            if ($this->restrictPages == 0) {
                $startDate = strtotime('-1 years') . '000';
            } else {
                $startDate = strtotime('-2 months') . '000';
            }
            $endDate = strtotime('now') . '000';
            $transaction_url = $currentDomainUrl . '/payments/event/view?accountType=PAYABLE&startDate=' . $startDate . '&endDate=' . $endDate . '&resultsPerPage=50&pageNumber=1';
            $this->exts->log('TRANSACTION URL (Standard Orders): ' . $transaction_url);
            $this->exts->openUrl($transaction_url);
            $this->downloadTransaction();
            $transaction_url = $currentDomainUrl . '/payments/event/view?accountType=INVOICING&startDate=' . $startDate . '&endDate=' . $endDate . '&resultsPerPage=50&pageNumber=1';
            $this->exts->log('TRANSACTION URL (Invoiced Orders): ' . $transaction_url);
            $this->exts->openUrl($transaction_url);
            $this->downloadTransaction();
        }

        // Download from advertiser invoices
        if ((int)@$this->no_advertising_bills != 1) {
            $this->exts->openUrl($currentDomainUrl . '/gp/advertiser/transactions/transactions.html');
            $this->downloadAdvertiserInvoices();
        }

        // Download from statement page
        if ((int)@$this->payment_settlements == 1) {
            $this->exts->openUrl($currentDomainUrl . '/gp/payments-account/past-settlements.html');
            $this->downloadStatements();
        }

        // Download from seller-fee-invoices
        if ((int)@$this->seller_fees == 1) {
            $this->exts->openUrl($currentDomainUrl . '/tax/seller-fee-invoices');
            $this->downloadSellerFeeInvoice();
        }
    }

    // Final, check no invoice
    if ($this->isNoInvoice) {
        $this->exts->no_invoice();
    }
}
private function downloadSellerFeeInvoice()
{
    sleep(25);
    $this->exts->capture("4-seller-fee-invoices-page");

    $rows = $this->exts->querySelectorAll('table > tbody > tr');
    foreach ($rows as $row) {
        $tags = $this->exts->querySelectorAll('td', $row);
        if (count($tags) >= 14 && $this->exts->querySelector('button[data-invoice]', end($tags)) != null) {
            $invoice_button = $this->exts->querySelector('button[data-invoice]', end($tags));
            $invoiceName = $invoice_button->getAttribute('data-invoice');
            $invoiceFileName = $invoiceName . '.pdf';
            $invoiceDate = trim($tags[count($tags) - 3]->getText());
            $invoiceAmount = '';

            $this->exts->log('--------------------------');
            $this->exts->log('invoiceName: ' . $invoiceName);
            $this->exts->log('invoiceDate: ' . $invoiceDate);
            $this->exts->log('invoiceAmount: ' . $invoiceAmount);
            $invoiceDate = $this->exts->parse_date($invoiceDate, 'D M d H:i:s * Y', 'Y-m-d');
            $this->exts->log('Date parsed: ' . $invoiceDate);

            // Download invoice if it not exisited
            if ($this->exts->invoice_exists($invoiceName)) {
                $this->exts->log('Invoice existed ' . $invoiceFileName);
            } else {
                try {
                    $this->exts->log('Click download button');
                    $invoice_button->click();
                } catch (\Exception $exception) {
                    $this->exts->log('Click download button by javascript');
                    $this->exts->execute_javascript("arguments[0].click()", [$invoice_button]);
                }
                sleep(10);
                $this->exts->wait_and_check_download('pdf');
                $downloaded_file = $this->exts->find_saved_file('pdf', $invoiceFileName);

                if (trim($downloaded_file) != '' && file_exists($downloaded_file)) {
                    $this->exts->new_invoice($invoiceName, $invoiceDate, $invoiceAmount, $invoiceFileName);
                    sleep(1);
                } else {
                    $this->exts->log(__FUNCTION__ . '::No download ' . $invoiceFileName);
                    $this->exts->execute_javascript("arguments[0].click()", [$invoice_button]);
                    sleep(10);
                    $this->exts->wait_and_check_download('pdf');
                    $downloaded_file = $this->exts->find_saved_file('pdf', $invoiceFileName);

                    if (trim($downloaded_file) != '' && file_exists($downloaded_file)) {
                        $this->exts->new_invoice($invoiceName, $invoiceDate, $invoiceAmount, $invoiceFileName);
                        sleep(1);
                    } else {
                        $this->exts->log(__FUNCTION__ . '::No download ' . $invoiceFileName);
                    }
                }
            }
            $this->isNoInvoice = false;
        }
    }
}
private function downloadTransaction($pageCount = 1)
{
    sleep(10);
    $this->exts->capture("4-transaction-page");
    // 2021-12, maybe code in below if block is no longer work since this site changed, but still keep it as Mukesh request.
    if ($this->exts->exists('table > tbody > tr a[href*="/transaction-details.html?"]')) {
        $invoices = [];
        $rows = $this->exts->querySelectorAll('table > tbody > tr');
        $this->exts->log("Number of transactions rows - " . count($rows));
        foreach ($rows as $row) {
            $tags = $this->exts->querySelectorAll('td', $row);
            if (count($tags) >= 9 && $this->exts->querySelector('a[href*="/transaction-details.html?"]', end($tags)) != null) {
                $invoiceUrl = $this->exts->querySelector('a[href*="/transaction-details.html?"]', end($tags))->getAttribute("href");
                $invoiceName = explode(
                    '&',
                    array_pop(explode('transaction_id=', $invoiceUrl))
                )[0];
                $invoiceName = preg_replace("/[^\w]/", '', $invoiceName);
                $invoiceDate = trim($tags[0]->getAttribute('innerText'));
                $amountText = trim(end($tags)->getAttribute('innerText'));
                $invoiceAmount = preg_replace('/[^\d\.\,]/', '', $amountText);
                if (stripos($amountText, 'A$') !== false) {
                    $invoiceAmount = $invoiceAmount . ' AUD';
                } else if (stripos($amountText, '$') !== false) {
                    $invoiceAmount = $invoiceAmount . ' USD';
                } else if (stripos(urlencode($amountText), '%C2%A3') !== false) {
                    $invoiceAmount = $invoiceAmount . ' GBP';
                } else {
                    $invoiceAmount = $invoiceAmount . ' EUR';
                }

                $invoiceAltName = trim($tags[2]->getAttribute('innerText'));
                $checkText = preg_replace('/[^\d\.\,]/', '', $invoiceAltName);
                if ($invoiceAltName == "---" || empty($checkText) || trim($checkText) == "") {
                    $invoiceAltName = $invoiceName;
                }
                if (!$this->exts->invoice_exists($invoiceName) || !$this->exts->invoice_exists($invoiceAltName)) {
                    array_push($invoices, array(
                        'invoiceName' => ($invoiceAltName != "" && $invoiceAltName != "---") ? $invoiceAltName : $invoiceName,
                        'invoiceDate' => $invoiceDate,
                        'invoiceAmount' => $invoiceAmount,
                        'invoiceUrl' => $invoiceUrl
                    ));
                } else {
                    $this->exts->log('Invoice existed ' . $invoiceName);
                }
                $this->isNoInvoice = false;
            }
        }

        // Download all invoices
        $this->exts->log('Invoices found: ' . count($invoices));
        foreach ($invoices as $invoice) {
            $this->exts->log('--------------------------');
            $this->exts->log('invoiceName: ' . $invoice['invoiceName']);
            $this->exts->log('invoiceDate: ' . $invoice['invoiceDate']);
            $this->exts->log('invoiceAmount: ' . $invoice['invoiceAmount']);
            $this->exts->log('invoiceUrl: ' . $invoice['invoiceUrl']);

            $invoiceFileName = $invoice['invoiceName'] . '.pdf';
            $parsed_date = $this->exts->parse_date($invoice['invoiceDate'], 'd M Y', 'Y-m-d');
            if ($parsed_date == '') {
                $parsed_date = $this->exts->parse_date($invoice['invoiceDate'], 'd#m#Y', 'Y-m-d');
            }
            if ($parsed_date == '') {
                $parsed_date = $this->exts->parse_date($invoice['invoiceDate'], 'd.m.Y', 'Y-m-d');
            }
            if ($parsed_date == '') {
                $parsed_date = $this->exts->parse_date($invoice['invoiceDate'], 'j M# y', 'Y-m-d');
            }
            $this->exts->log('Date parsed: ' . $parsed_date);

            // $this->exts->open_new_window();
            $this->exts->openUrl($invoice['invoiceUrl']);
            sleep(5);

            //Check and Fill login page
            if ($this->exts->querySelector($this->password_selector) != null) {
                $this->exts->log("Enter Password");
                $this->exts->moveToElementAndType($this->password_selector, $this->password);
                sleep(1);

                if ($this->exts->querySelector($this->remember_me) != null) {
                    $checkboxElements = $this->exts->querySelectorAll($this->remember_me);
                    // $bValue = false;
                    if (count($checkboxElements) > 0) {
                        // $bValue = $checkboxElements[0]->isSelected();
                        // if($bValue == false) {
                        $this->exts->click_element($checkboxElements[0]);
                        // }
                    }
                }
                $this->exts->capture("2-login-page-filled");
                $this->exts->moveToElementAndClick($this->submit_login_selector);
                sleep(5);
            }
            if (!$this->isLoginSuccess()) {
                $this->exts->init_required();
            }
            sleep(5);
            $this->exts->execute_javascript('
            document.querySelectorAll(\'div#container div#predictive-help\')[0].remove();
            document.querySelectorAll(\'div#sc-top-nav\')[0].remove();
            document.querySelectorAll(\'div#sc-footer-container\')[0].remove();
            document.querySelectorAll(\'div#left-side\')[0].setAttribute("style","float:left; text-align:left; width:100%;");
        ');

            $downloaded_file = $this->exts->download_current($invoiceFileName, 3);
            if (trim($downloaded_file) != '' && file_exists($downloaded_file)) {
                $this->exts->new_invoice($invoice['invoiceName'], $parsed_date, $invoice['invoiceAmount'], $invoiceFileName);
                sleep(1);
            } else {
                $this->exts->log(__FUNCTION__ . '::No download ' . $invoiceFileName);
            }

            // close new tab too avoid too much tabs
            // $handles = $this->exts->webdriver->getWindowHandles();
            // if (count($handles) > 1) {
            //     $this->exts->webdriver->switchTo()->window(end($handles));
            //     $this->exts->webdriver->close();
            //     $handles = $this->exts->webdriver->getWindowHandles();
            //     $this->exts->webdriver->switchTo()->window($handles[0]);
            // }
        }


        $restrictPages = isset($this->exts->config_array["restrictPages"]) ? (int)@$this->exts->config_array["restrictPages"] : 3;
        if ($restrictPages == 0 && $pageCount < 100 && $this->exts->querySelector('.currentpagination + a') != null) {
            if (count($invoices) == 0) {
                $this->exts->update_process_lock();
            }
            $pageCount++;
            $this->exts->execute_javascript('
            document.querySelectorAll(\'.currentpagination + a\')[0].click();
        ');
            //$this->exts->moveToElementAndClick('.currentpagination + a');
            sleep(5);
            $this->downloadTransaction($pageCount);
        }
    } else if ($this->exts->exists('.transactions-table-content [role="row"]')) {
        // Huy added 2021-12
        for ($paging_count = 1; $paging_count < 100; $paging_count++) {
            $invoices = [];
            $rows = count($this->exts->querySelectorAll('.transactions-table-content [role="row"]'));
            for ($i = 0; $i < $rows; $i++) {
                $row = $this->exts->querySelectorAll('.transactions-table-content [role="row"]')[$i];
                $detail_button = $this->exts->getElement('a#link-target', $row);
                if ($detail_button != null) {
                    $this->isNoInvoice = false;
                    $invoiceName =  $this->exts->extract('[role="cell"]:nth-child(3)', $row);
                    $invoiceName = trim($invoiceName);
                    $invoiceFileName = $invoiceName . '.pdf';
                    $invoiceDate = $this->exts->extract('[role="cell"]:nth-child(1)', $row);
                    $amountText = $this->exts->extract('a#link-target', $row);
                    $invoiceAmount = preg_replace('/[^\d\.\,]/', '', $amountText);
                    if (stripos($amountText, 'A$') !== false) {
                        $invoiceAmount = $invoiceAmount . ' AUD';
                    } else if (stripos($amountText, '$') !== false) {
                        $invoiceAmount = $invoiceAmount . ' USD';
                    } else if (stripos(urlencode($amountText), '%C2%A3') !== false) {
                        $invoiceAmount = $invoiceAmount . ' GBP';
                    } else {
                        $invoiceAmount = $invoiceAmount . ' EUR';
                    }

                    $this->exts->log('--------------------------');
                    $this->exts->log('invoiceName: ' . $invoiceName);
                    $this->exts->log('invoiceDate: ' . $invoiceDate);
                    $this->exts->log('invoiceAmount: ' . $invoiceAmount);
                    $parsed_date = $this->exts->parse_date($invoiceDate, 'd-M-Y', 'Y-m-d');
                    $this->exts->log('Date parsed: ' . $parsed_date);

                    // Download invoice if it not exisited
                    if ($this->exts->invoice_exists($invoiceName) || $this->exts->document_exists($invoiceFileName)) {
                        $this->exts->log('Invoice existed ' . $invoiceFileName);
                    } else {
                        try {
                            $this->exts->log('Click detail button');
                            $detail_button->click();
                        } catch (\Exception $exception) {
                            $this->exts->log('Click detail button by javascript');
                            $this->exts->execute_javascript("arguments[0].click()", [$detail_button]);
                        }
                        sleep(1);
                        $this->exts->waitTillPresent('#sc-content-container .transaction-details-body-section .event-details-body');
                        if ($this->exts->exists('#sc-content-container .transaction-details-body-section .event-details-body')) {
                            // Clear some alert, popup..etc
                            $this->exts->execute_javascript('
                            if(document.querySelector("kat-alert") != null){
                            document.querySelector("kat-alert").shadowRoot.querySelector("[part=alert-dismiss-button]").click();
                            }
                        ');
                            $this->exts->moveToElementAndClick('.katHmdCancelBtn');
                            // END clearing alert..

                            // Capture page if detail displayed
                            $this->exts->execute_javascript('
                            var divs = document.querySelectorAll("body > div > *:not(#sc-content-container)");
                            for( var i = 0; i < divs.length; i++){
                                divs[i].style.display = "none";
                            }
                        ');

                            $downloaded_file = $this->exts->download_current($invoiceFileName, 0);
                            if (trim($downloaded_file) != '' && file_exists($downloaded_file)) {
                                $this->exts->new_invoice($invoiceName, $parsed_date, $invoiceAmount, $downloaded_file);
                            } else {
                                $this->exts->log(__FUNCTION__ . '::No download ' . $invoiceFileName);
                            }
                        } else {
                            $this->exts->capture("4-transaction-detail-error");
                        }

                        // back to transaction list
                        $this->exts->moveToElementAndClick('.transaction-details-footer-section a#link-target');
                        sleep(2);
                    }
                    $this->isNoInvoice = false;
                }
            }

            // Process next page
            // This page using shadow element, We must process via JS
            $is_next = $this->exts->execute_javascript('
            try {
                document.querySelector("kat-pagination").shadowRoot.querySelector("[part=pagination-nav-right]:not(.end)").click();
                return true;
            } catch(ex){
                return false;	
            }
        ');
            if ($is_next && $this->exts->config_array["restrictPages"] == '0') {
                sleep(7);
            } else {
                break;
            }
        }
    }
}
private function downloadStatements($pageCount = 1)
{
    sleep(15);
    $this->exts->capture("4-statements-page");
    if ($this->exts->exists('table > tbody > tr a[href*="/settlement-summary"]')) {
        $invoices = [];
        $rows = $this->exts->querySelectorAll('table > tbody > tr');
        foreach ($rows as $row) {
            $tags = $this->exts->querySelectorAll('td', $row);
            if (count($tags) >= 7 && $this->exts->querySelector('a[href*="/settlement-summary"]', end($tags)) != null && $this->exts->querySelector('a[href*="/payments/reports/download?"]', end($tags)) != null) {
                $invoiceUrl = $this->exts->querySelector('a[href*="/settlement-summary"]', end($tags))->getAttribute("href");
                $invoiceName = explode(
                    '&',
                    array_pop(explode('groupId=', $invoiceUrl))
                )[0];
                $invoiceName = preg_replace("/[^\w]/", '', $invoiceName);
                $invoiceDate = trim(end(explode(' - ', $tags[0]->getText())));
                $amountText = trim($tags[count($tags) - 2]->getText());
                $invoiceAmount = preg_replace('/[^\d\.\,]/', '', $amountText);
                if (stripos($amountText, 'A$') !== false) {
                    $invoiceAmount = $invoiceAmount . ' AUD';
                } else if (stripos($amountText, '$') !== false) {
                    $invoiceAmount = $invoiceAmount . ' USD';
                } else if (stripos(urlencode($amountText), '%C2%A3') !== false) {
                    $invoiceAmount = $invoiceAmount . ' GBP';
                } else {
                    $invoiceAmount = $invoiceAmount . ' EUR';
                }

                $invoiceAltName = "Seller-Invoice" . $invoiceDate;
                if (!$this->exts->invoice_exists($invoiceName) && !$this->exts->invoice_exists($invoiceAltName)) {
                    array_push($invoices, array(
                        'invoiceName'   => $invoiceName,
                        'invoiceDate'   => $invoiceDate,
                        'invoiceAmount' => $invoiceAmount,
                        'invoiceUrl'    => $invoiceUrl
                    ));
                    $this->isNoInvoice = false;
                } else {
                    $this->exts->log("Invoice exists - " . $invoiceName);
                }
            }
        }

        // Download all invoices
        $this->exts->log('Statements found: ' . count($invoices));
        foreach ($invoices as $invoice) {
            $this->exts->log('--------------------------');
            $this->exts->log('invoiceName: ' . $invoice['invoiceName']);
            $this->exts->log('invoiceDate: ' . $invoice['invoiceDate']);
            $this->exts->log('invoiceAmount: ' . $invoice['invoiceAmount']);
            $this->exts->log('invoiceUrl: ' . $invoice['invoiceUrl']);

            $invoiceFileName = $invoice['invoiceName'] . '.pdf';
            $parsed_date = $this->exts->parse_date($invoice['invoiceDate'], 'd M Y', 'Y-m-d');
            if ($parsed_date == '') {
                $parsed_date = $this->exts->parse_date($invoice['invoiceDate'], 'd#m#Y', 'Y-m-d');
            }
            if ($parsed_date == '') {
                $parsed_date = $this->exts->parse_date($invoice['invoiceDate'], 'd.m.Y', 'Y-m-d');
            }
            if ($parsed_date == '') {
                $parsed_date = $this->exts->parse_date($invoice['invoiceDate'], 'j M# y', 'Y-m-d');
            }
            $this->exts->log('Date parsed: ' . $parsed_date);

            // $this->exts->open_new_window();
            $this->exts->openUrl($invoice['invoiceUrl']);
            sleep(5);

            $this->checkFillLogin();
            if (!$this->isLoginSuccess()) {
                $this->checkFillTwoFactor();

                if (!$this->isLoginSuccess()) {
                    $this->exts->init_required();
                }
            }

            if (count($this->exts->querySelectorAll('#printableSections')) > 0) {
                $this->exts->execute_javascript('
                var printableView = document.getElementById("printableSections");
                var allLinks = document.getElementsByTagName("link");
                var allStyles = document.getElementsByTagName("style");
                var printableHTML = Array.from(allLinks).map(link => link.outerHTML).join("")
                                    + Array.from(allStyles).map(link => link.outerHTML).join("")
                                    + printableView.outerHTML;
                document.body.innerHTML = printableHTML;
            ');

                $downloaded_file = $this->exts->download_current($invoiceFileName, 3);
                if (trim($downloaded_file) != '' && file_exists($downloaded_file)) {
                    $this->exts->new_invoice($invoice['invoiceName'], $parsed_date, $invoice['invoiceAmount'], $invoiceFileName);
                    sleep(1);
                } else {
                    $this->exts->log(__FUNCTION__ . '::No download ' . $invoiceFileName);
                }
            } else if (count($this->exts->querySelectorAll('#sc-navbar-container')) > 0) {
                $this->exts->execute_javascript('
                document.querySelectorAll("#sc-navbar-container")[0].remove();
                document.querySelectorAll("article.dashboard-header")[0].remove();
                document.querySelectorAll(".sc-footer")[0].remove();
            ');

                $downloaded_file = $this->exts->download_current($invoiceFileName, 3);
                if (trim($downloaded_file) != '' && file_exists($downloaded_file)) {
                    $this->exts->new_invoice($invoice['invoiceName'], $parsed_date, $invoice['invoiceAmount'], $invoiceFileName);
                    sleep(1);
                } else {
                    $this->exts->log(__FUNCTION__ . '::No download ' . $invoiceFileName);
                }
            } else {
                $this->exts->log(__FUNCTION__ . '::Page design is changed for print ' . $invoiceFileName);
            }
        }

        $restrictPages = isset($this->exts->config_array["restrictPages"]) ? (int)@$this->exts->config_array["restrictPages"] : 3;
        if (
            $restrictPages == 0 &&
            $pageCount < 100 &&
            $this->exts->querySelector('.currentpagination + a') != null
        ) {
            if (count($invoices) == 0) {
                $this->exts->update_process_lock();
            }

            $pageCount++;
            $this->exts->execute_javascript('
            document.querySelectorAll(\'.currentpagination + a\')[0].click();
        ');
            sleep(15);
            $this->downloadStatements($pageCount);
        }
    } else if ($this->exts->exists('kat-data-table tbody tr kat-link[href*="/detail"]')) {
        // Huy added this 2021-12
        if ($this->exts->config_array["restrictPages"] == '0') {
            $currentPageHeight = 0;
            for ($i = 0; $i < 15 && $currentPageHeight != $this->exts->execute_javascript('return document.body.scrollHeight;'); $i++) {
                $this->exts->log('Scroll to bottom ' . $currentPageHeight);
                $currentPageHeight = $this->exts->execute_javascript('return document.body.scrollHeight;');
                $this->exts->execute_javascript('window.scrollTo(0,document.body.scrollHeight);');
                sleep(7);
            }
            sleep(5);
        }

        // It using shadow root, so collect invoice detail by JS
        $invoices = $this->exts->execute_javascript('
        var data = [];
        var trs = document.querySelectorAll("kat-data-table tbody tr kat-link[href*=detail][href*=groupId]");

        // Skip first row because it is current period, do not get it
        for (var i = 1; i < trs.length; i ++) {
            var link = trs[i].shadowRoot.querySelector("a");
            var url = link.href;

            data.push({
                invoiceName: url.split("groupId=").pop().split("&")[0],
                invoiceDate: "",
                invoiceAmount: "",
                invoiceUrl: url
            });
        }
        return data;
    ');
        // Download all invoices
        $this->exts->log('Statements found: ' . count($invoices));
        foreach ($invoices as $invoice) {
            $this->exts->log('--------------------------');
            $this->exts->log('invoiceName: ' . $invoice['invoiceName']);
            $this->exts->log('invoiceDate: ' . $invoice['invoiceDate']);
            $this->exts->log('invoiceAmount: ' . $invoice['invoiceAmount']);
            $this->exts->log('invoiceUrl: ' . $invoice['invoiceUrl']);
            $invoiceFileName = $invoice['invoiceName'] . '.pdf';
            $this->isNoInvoice = false;

            // Download invoice if it not exisited
            if ($this->exts->invoice_exists($invoice['invoiceName']) || $this->exts->document_exists($invoiceFileName)) {
                $this->exts->log('Invoice existed ' . $invoiceFileName);
            } else {
                // $this->exts->open_new_window();
                $this->exts->openUrl($invoice['invoiceUrl']);
                sleep(2);
                $this->checkFillLogin();
                if (!$this->isLoginSuccess()) {
                    $this->checkFillTwoFactor();
                }

                if ($this->exts->exists('.dashboard-content #print-this-page-link')) {
                    // Clear some alert, popup..etc
                    $this->exts->execute_javascript('
                    if(document.querySelector("kat-alert") != null){
                    document.querySelector("kat-alert").shadowRoot.querySelector("[part=alert-dismiss-button]").click();
                    }
                ');
                    $this->exts->moveToElementAndClick('.katHmdCancelBtn');
                    // END clearing alert..

                    $this->exts->moveToElementAndClick('.dashboard-content #print-this-page-link');
                    $this->exts->wait_and_check_download('pdf');
                    $downloaded_file = $this->exts->find_saved_file('pdf', $invoiceFileName);

                    if (trim($downloaded_file) != '' && file_exists($downloaded_file)) {
                        $this->exts->new_invoice($invoice['invoiceName'], '', '', $downloaded_file);
                    } else {
                        $this->exts->log(__FUNCTION__ . '::No download ' . $invoiceFileName);
                    }
                } else {
                    $this->exts->capture('statement-detail-error');
                }
            }
        }
    }
}
private function downloadAdvertiserInvoices()
{
    sleep(25);
    $this->exts->capture("4-advertiser-invoices-page");

    if ($this->exts->querySelector('select#sc-mkt-picker-switcher-select option.sc-mkt-picker-switcher-select-option[value*="' . trim($this->currentSelectedMarketPlace) . '"]') != null || (int)@$this->no_marketplace == 0) {
        if ((int)@$this->no_marketplace != 0) {
            $this->exts->log("Checking marketplace is swtiched correctly");
            $selectedMarketplace = $this->exts->querySelector('select#sc-mkt-picker-switcher-select option.sc-mkt-picker-switcher-select-option[value*="' . trim($this->currentSelectedMarketPlace) . '"]')->getAttribute('selected');
            $this->exts->log("Selected Marketplace - " . $selectedMarketplace);
        } else {
            $this->exts->log("Selected Marketplace - No MarketPlace");
        }
        if ($selectedMarketplace != null || (int)@$this->no_marketplace == 0) {
            if ($this->exts->waitTillPresent('.calendarsContainer input#startCal')) {
                $currentStart_date = $this->exts->querySelector('.calendarsContainer input#startCal')->getAttribute('aria-label');
                $date_format = "m/d/Y";
                if (stripos($currentStart_date, "d/m") !== false || stripos($currentStart_date, "m/y") !== false) {
                    $date_format = "d/m/Y";
                } else if (stripos($currentStart_date, "d-m") !== false || stripos($currentStart_date, "m-y") !== false) {
                    $date_format = "d-m-Y";
                } else if (stripos($currentStart_date, "m/d") !== false || stripos($currentStart_date, "d/y") !== false) {
                    $date_format = "m/d/Y";
                } else if (stripos($currentStart_date, "m-d") !== false || stripos($currentStart_date, "d-y") !== false) {
                    $date_format = "m-d-Y";
                }
                $this->exts->log(__FUNCTION__ . '::Date format ' . $date_format);
                // if restrictpages == 0 then 2 years otherwise 2 month
                $endDate = date($date_format);
                if ($this->restrictPages == 0) {
                    $startDate = date($date_format, strtotime('-2 years'));
                } else {
                    $startDate = date($date_format, strtotime('-2 months'));
                }

                $this->exts->moveToElementAndType('.calendarsContainer input#startCal', $startDate);
                sleep(1);
                $this->exts->moveToElementAndType('.calendarsContainer input#endCal', $endDate);
                sleep(1);
                $this->exts->capture("4-advertiser-invoices-1-filter");
                $this->exts->moveToElementAndClick('.calendarsContainer [type="submit"]');
                sleep(15);
                $this->exts->capture("4-advertiser-invoices-2-submitted");
            }

            // get invoice
            for ($paging_count = 1; $paging_count < 100; $paging_count++) {
                $invoices = [];
                $rows = count($this->exts->querySelectorAll('table#paidTable > tbody > tr'));
                for ($i = 0; $i < $rows; $i++) {
                    $row = $this->exts->querySelectorAll('table#paidTable > tbody > tr')[$i];
                    $download_button = $this->exts->getElement('.dwnld-icon-alignment .dwnld-btn-enb', $row);
                    if ($download_button != null) {
                        $invoiceName =  trim($this->exts->extract('td[id^="invoice-number"]', $row));
                        $invoiceFileName = $invoiceName . '.pdf';
                        $invoiceDate = trim($this->exts->extract('td[id^="invoice-date"]', $row));
                        $amountText = trim($this->exts->extract('td[id^="invoice-total"]', $row));
                        $invoiceAmount = preg_replace('/[^\d\.\,]/', '', $amountText);
                        if (stripos($amountText, 'A$') !== false) {
                            $invoiceAmount = $invoiceAmount . ' AUD';
                        } else if (stripos($amountText, '$') !== false) {
                            $invoiceAmount = $invoiceAmount . ' USD';
                        } else if (stripos(urlencode($amountText), '%C2%A3') !== false) {
                            $invoiceAmount = $invoiceAmount . ' GBP';
                        } else {
                            $invoiceAmount = $invoiceAmount . ' EUR';
                        }

                        $this->exts->log('--------------------------');
                        $this->exts->log('invoiceName: ' . $invoiceName);
                        $this->exts->log('invoiceDate: ' . $invoiceDate);
                        $this->exts->log('invoiceAmount: ' . $invoiceAmount);
                        $parsed_date = $this->exts->parse_date($invoiceDate, 'd-M-Y', 'Y-m-d');
                        $this->exts->log('Date parsed: ' . $parsed_date);

                        // Download invoice if it not exisited
                        if ($this->exts->invoice_exists($invoiceName) || $this->exts->document_exists($invoiceFileName)) {
                            $this->exts->log('Invoice existed ' . $invoiceFileName);
                        } else {
                            $this->exts->click_element($download_button);
                            sleep(1);
                            $this->exts->click_element('.a-popover[aria-hidden="false"] a[id$="invoicePDF"]');
                            sleep(5);
                            $this->exts->wait_and_check_download('pdf');
                            $downloaded_file = $this->exts->find_saved_file('pdf', $invoiceFileName);

                            if (trim($downloaded_file) != '' && file_exists($downloaded_file)) {
                                $this->exts->new_invoice($invoiceName, $parsed_date, $invoiceAmount, $invoiceFileName);
                                sleep(1);
                            } else {
                                $this->exts->log(__FUNCTION__ . '::No download ' . $invoiceFileName);
                            }
                        }
                        $this->isNoInvoice = false;
                    }
                }

                // Process next page
                if ($this->exts->waitTillPresent('ul.a-pagination li.a-last:not(.a-disabled)')) {
                    $this->exts->moveToElementAndClick('ul.a-pagination li.a-last:not(.a-disabled)');
                    sleep(10);
                } else {
                    break;
                }
            }
        }
    }
}

function checkSolveCaptcha()
{
    if ($this->exts->exists('form[action*="/errors/validateCaptcha"]')) {
        $this->exts->processCaptcha('form[action*="/errors/validateCaptcha"] img', 'form[action*="/errors/validateCaptcha"] input#captchacharacters ');
        $this->exts->capture('captcha-filled');
        $this->exts->moveToElementAndClick('form[action*="/errors/validateCaptcha"] [type="submit"]');
        sleep(10);
    }

    if ($this->exts->exists('form[action*="/errors/validateCaptcha"]')) {
        $this->exts->processCaptcha('form[action*="/errors/validateCaptcha"] img', 'form[action*="/errors/validateCaptcha"] input#captchacharacters');
        $this->exts->capture('captcha-filled');
        $this->exts->moveToElementAndClick('form[action*="/errors/validateCaptcha"] [type="submit"]');
        sleep(10);
    }

    if ($this->exts->exists('form[action*="/errors/validateCaptcha"]')) {
        $this->exts->processCaptcha('form[action*="/errors/validateCaptcha"] img', 'form[action*="/errors/validateCaptcha"] input#captchacharacters');
        $this->exts->capture('captcha-filled');
        $this->exts->moveToElementAndClick('form[action*="/errors/validateCaptcha"] [type="submit"]');
        sleep(10);
    }
}