public $baseUrl = 'https://www.onedirect.fr/customer/account/';
public $loginUrl = 'https://www.onedirect.fr/customer/account/login/';
public $invoicePageUrl = 'https://www.onedirect.fr/sales/order/history/';

public $username_selector = 'form#login-form input[name="login[username]"]';
public $password_selector = 'form#login-form input[name="login[password]"]';
public $remember_me_selector = '';
public $submit_login_selector = 'button.action.login';

public $check_login_failed_selector = 'div.login-container div.message.error';
public $check_login_success_selector = 'a[href*="/account/logout/"]';

public $isNoInvoice = true;

/**
    * Entry Method thats called for a portal
    * @param Integer $count Number of times portal is retried.
    */
private function initPortal($count)
{
    $this->exts->log('Begin initPortal ' . $count);
    $this->exts->openUrl($this->baseUrl);
    sleep(10);
    $this->exts->loadCookiesFromFile();

    $this->exts->waitTillPresent('button[id="onetrust-accept-btn-handler"]', 7);

    if ($this->exts->exists('button[id="onetrust-accept-btn-handler"]')) {
        $this->exts->moveToElementAndClick('button[id="onetrust-accept-btn-handler"]');
        sleep(2);
    }

    if (!$this->checkLogin()) {
        $this->exts->log('NOT logged via cookie');

        $this->exts->clearCookies();
        $this->fillForm(0);
    }
    if ($this->checkLogin()) {
        $this->exts->log(">>>>>>>>>>>>>>>Login successful!!!!");
        $this->exts->capture("LoginSuccess");

        $this->exts->openUrl($this->invoicePageUrl);
        $this->downloadInvoices();
        // Final, check no invoice
        if ($this->isNoInvoice) {
            $this->exts->no_invoice();
        }

        $this->exts->success();
    } else {
        $this->exts->log(__FUNCTION__ . '::Use login failed');
        $this->exts->log(__FUNCTION__ . '::Last URL: ' . $this->exts->getUrl());

        $error_text = strtolower($this->exts->extract($this->check_login_failed_selector));

        $this->exts->log(__FUNCTION__ . '::Error text: ' . $error_text);
        if (stripos($error_text, strtolower('Merci de vÃ©rifier votre email et votre mot de passe')) !== false) {
            $this->exts->loginFailure(1);
        } else {
            $this->exts->loginFailure();
        }
    }
}

public function fillForm($count)
{
    $this->exts->log("Begin fillForm " . $count);

    $this->exts->waitTillPresent($this->username_selector);
    if ($this->exts->querySelector($this->username_selector) != null) {

        $this->exts->capture("1-pre-login");
        $this->exts->log("Enter Username");
        $this->exts->moveToElementAndType($this->username_selector, $this->username);
        sleep(2);
        $this->exts->log("Enter Password");
        $this->exts->moveToElementAndType($this->password_selector, $this->password);
        sleep(2);

        if ($this->exts->exists($this->remember_me_selector)) {
            $this->exts->click_by_xdotool($this->remember_me_selector);
            sleep(2);
        }

        $this->exts->capture("1-login-page-filled");
        if ($this->exts->exists($this->submit_login_selector)) {
            $this->exts->moveToElementAndClick($this->submit_login_selector);
            sleep(2);
        }
    } else {
        $this->exts->log(__FUNCTION__ . '::Login page not found');
        $this->exts->capture("2-login-page-not-found");
    }
}
/**
    * Method to Check where user is logged in or not
    * return boolean true/false
    */
public  function checkLogin()
{
    $this->exts->log("Begin checkLogin ");
    $isLoggedIn = false;
    try {
        for ($wait = 0; $wait < 2 && $this->exts->executeSafeScript("return !!document.querySelector('" . $this->check_login_success_selector . "');") != 1; $wait++) {
            $this->exts->log('Waiting for login.....');
            sleep(10);
        }
        if ($this->exts->exists($this->check_login_success_selector)) {
            $this->exts->log(">>>>>>>>>>>>>>>Login successful!!!!");
            $isLoggedIn = true;
        }
    } catch (Exception $exception) {

        $this->exts->log("Exception checking loggedin " . $exception);
    }
    return $isLoggedIn;
}

private function downloadInvoices($count = 1)
{
    $this->exts->log(__FUNCTION__);

    $this->exts->waitTillPresent('table tbody tr');
    $this->exts->capture("4-invoices-classic");

    $invoices = [];
    $rows = $this->exts->getElements('table tbody tr');
    foreach ($rows as $key => $row) {
        $orderLink = $this->exts->getElement('a', $row);
        if ($orderLink != null) {
            $invoiceUrl = $orderLink->getAttribute("href");
            $invoiceName = $this->exts->extract('td:nth-child(1)', $row);
            $invoiceDate = $this->exts->extract('td:nth-child(2)', $row);
            $invoiceAmount = $this->exts->extract('td:nth-child(3)', $row);

            array_push($invoices, array(
                'invoiceName' => $invoiceName,
                'invoiceDate' => $invoiceDate,
                'invoiceAmount' => $invoiceAmount,
                'orderUrl' => $invoiceUrl,
            ));
            $this->isNoInvoice = false;
        }
    }

    $this->exts->log('Invoices found: ' . count($invoices));
    foreach ($invoices as $invoice) {
        $this->exts->log('--------------------------');
        $this->exts->log('invoiceName: ' . $invoice['invoiceName']);
        $this->exts->log('invoiceDate: ' . $invoice['invoiceDate']);
        $this->exts->log('invoiceAmount: ' . $invoice['invoiceAmount']);
        $this->exts->log('orderUrl: ' . $invoice['invoiceUrl']);

        $invoiceFileName = !empty($invoice['invoiceName']) ?  $invoice['invoiceName'] . '.pdf' : '';
        $invoice['invoiceDate'] = $this->exts->parse_date($invoice['invoiceDate'], 'd.m.Y', 'Y-m-d');
        $this->exts->log('Date parsed: ' . $invoice['invoiceDate']);

        $newTab = $this->exts->openNewTab($invoice['invoiceUrl']);
        sleep(5);
        $this->exts->waitTillPresent('a[href*="invoice/download/"]');

        $invoiceLink = $this->exts->getElement('a[href*="invoice/download/"]');
        if ($invoiceLink != null) {
            $invoiceUrl = $invoiceLink->getAttribute("href");


            $this->exts->log('invoiceUrl: ' .  $invoiceUrl);

            $downloaded_file = $this->exts->direct_download($invoiceUrl, 'pdf', $invoiceFileName);
            if (trim($downloaded_file) != '' && file_exists($downloaded_file)) {
                $this->exts->new_invoice($invoice['invoiceName'], $invoice['invoiceDate'], $invoice['invoiceAmount'], $invoiceFileName);
                sleep(1);
            } else {
                $this->exts->log(__FUNCTION__ . '::No download ' . $invoiceFileName);
            }
        }
        $this->exts->closeTab($newTab);
    }

    $restrictPages = 3;//isset($this->exts->config_array["restrictPages"]) ? (int)@$this->exts->config_array["restrictPages"] : 3;

    if ($count < $restrictPages && $this->exts->exists('a.pages-item-next')) {
        $this->exts->click_by_xdotool('a.pages-item-next');
        sleep(7);
        $count++;
        $this->downloadInvoices($count);
    }
}